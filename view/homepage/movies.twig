{% extends "_layouts/donatasmart.twig" %}

{% block meta_description %}Out from memory and recent: movies and TV shows I viewed. Here is the brief representation of it{% endblock %}

{% block page_contents %}
<p>I like to waste some time with various sessions of movies/tv shows. Some basic statistics from my list of watched movies and TV shows. List is made out of memory and free will</p>
{% if sums is defined %}
<table class="table table-condensed table-responsive">
    <thead>
        <tr>
            <th></th>
            <th>#</th>
            <th>genres per row</th>
            <th>countries per row</th>
            <th># directors</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>Movies:</th>
            <td>{{ sums.movies }}</td>
            <td>{{ (sums.genres / sums.movies)|number_format(5) }}</td>
            <td>{{ (sums.countries / sums.movies)|number_format(5) }}</td>
            <td>{{ sums.directors }}</td>
        </tr>
        <tr>
            <th>TV shows:</th>
            <td>{{ sums.series }}</td>
            <td>{{ (sums.genres_series / sums.series)|number_format(5) }}</td>
            <td>{{ (sums.countries_series / sums.series)|number_format(5) }}</td>
            <td></td>
        </tr>
    </tbody>
</table>
{% endif %}
{% if data is defined %}
<p>Numbers per years</p>
<div id="p-year" class="placeholder"></div>
<p>Numbers per decades</p>
<div id="p-decade" class="placeholder"></div>
<p>Percentages of items having particular genre</p>
<div id="p-genre" class="placeholder"></div>
<p>Percentage of directors who made a certain number of movies</p>
<div id="p-directed" class="placeholder"></div>
<div id="movies">
    <table>
        <tr><th></th><th>#movies</th></tr>
        {% for country,movie in data.countries %}
        <tr><td><a href="#by-country/{{ country|lower|url_encode }}/movies">{{ country }}</a></td><td>{{ movie }}</td></tr>
        {% endfor %}
    </table>
</div>
<div id="series">
    <table>
        <tr><th></th><th>#series</th></tr>
        {% for country,serie in data.countries_series %}
            <tr><td><a href="#by-country/{{ country|lower|url_encode }}/series">{{ country }}</a></td><td>{{ serie }}</td></tr>
        {% endfor %}
    </table>
</div>
<div class="wrapper">{% include "common/loading.twig" %}</div>
{% endif %}
{% endblock %}

{% block script %}
{% if data is defined %}
<script type="text/javascript">
//<!--
{% spaceless %}
{% autoescape false %}
var year_labels = [{{ data.years|keys|join(",") }}],
    year_data = [{{ data.years|join(",") }}],
    decade_labels = ['{{ data.decades|keys|join("0-9','") }}0-9'],
    decade_data = [{{ data.decades|join(",") }}],
    genre_labels = ['{{ data.genre_list|join("','") }}'],
    genre_movies_data = [{{ data.genres|join(",") }}],
    genre_series_data = [{{ data.genres_series|join(",") }}],
    directed_labels = [{{ data.directed|keys|join(",") }}],
    directed_data = [{{ data.directed|join(",") }}];
{% endautoescape %}
(function($) {
    // popup part
    var tokenRegex = /\{([^\}]+)\}/g,
    objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties
    replacer = function (all, key, obj) {
        var res = obj;
        key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {
            name = name || quotedName;
            if (res) {
                if (name in res) {
                    res = res[name];
                }
                typeof res == "function" && isFunc && (res = res());
            }
        });
        res = (res == null || res == obj ? all : res) + "";
        return res;
    },
    fill = function (str, obj) {
        return String(str).replace(tokenRegex, function (all, key) {
            return replacer(all, key, obj);
        });
    };
    Raphael.fn.popup = function (X, Y, set, pos, ret) {
        pos = String(pos || "top-middle").split("-");
        pos[1] = pos[1] || "middle";
        var r = 5,
            bb = set.getBBox(),
            w = Math.round(bb.width),
            h = Math.round(bb.height),
            x = Math.round(bb.x) - r,
            y = Math.round(bb.y) - r,
            gap = Math.min(h / 2, w / 2, 10),
            shapes = {
                top: "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}l-{right},0-{gap},{gap}-{gap}-{gap}-{left},0a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z",
                bottom: "M{x},{y}l{left},0,{gap}-{gap},{gap},{gap},{right},0a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z",
                right: "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}l0-{bottom}-{gap}-{gap},{gap}-{gap},0-{top}a{r},{r},0,0,1,{r}-{r}z",
                left: "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}l0,{top},{gap},{gap}-{gap},{gap},0,{bottom}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z"
            },
            offset = {
                hx0: X - (x + r + w - gap * 2),
                hx1: X - (x + r + w / 2 - gap),
                hx2: X - (x + r + gap),
                vhy: Y - (y + r + h + r + gap),
                "^hy": Y - (y - gap)
                
            },
            mask = [{
                x: x + r,
                y: y,
                w: w,
                w4: w / 4,
                h4: h / 4,
                right: 0,
                left: w - gap * 2,
                bottom: 0,
                top: h - gap * 2,
                r: r,
                h: h,
                gap: gap
            }, {
                x: x + r,
                y: y,
                w: w,
                w4: w / 4,
                h4: h / 4,
                left: w / 2 - gap,
                right: w / 2 - gap,
                top: h / 2 - gap,
                bottom: h / 2 - gap,
                r: r,
                h: h,
                gap: gap
            }, {
                x: x + r,
                y: y,
                w: w,
                w4: w / 4,
                h4: h / 4,
                left: 0,
                right: w - gap * 2,
                top: 0,
                bottom: h - gap * 2,
                r: r,
                h: h,
                gap: gap
            }][pos[1] == "middle" ? 1 : (pos[1] == "top" || pos[1] == "left") * 2];
            var dx = 0,
                dy = 0,
                out = this.path(fill(shapes[pos[0]], mask)).insertBefore(set);
            switch (pos[0]) {
                case "top":
                    dx = X - (x + r + mask.left + gap);
                    dy = Y - (y + r + h + r + gap);
                break;
                case "bottom":
                    dx = X - (x + r + mask.left + gap);
                    dy = Y - (y - gap);
                break;
                case "left":
                    dx = X - (x + r + w + r + gap);
                    dy = Y - (y + r + mask.top + gap);
                break;
                case "right":
                    dx = X - (x - gap);
                    dy = Y - (y + r + mask.top + gap);
                break;
            }
            out.translate(dx, dy);
            if (ret) {
                ret = out.attr("path");
                out.remove();
                return {
                    path: ret,
                    dx: dx,
                    dy: dy
                };
            }
            set.translate(dx, dy);
            return out;
    };
    
    // graph part
    Raphael.fn.drawGrid = function (x, y, w, h, wv, hv, color) {
        color = color || "#000";
        var path = ["M", Math.round(x) + .5, Math.round(y) + .5, "L", Math.round(x + w) + .5, Math.round(y) + .5, Math.round(x + w) + .5, Math.round(y + h) + .5, Math.round(x) + .5, Math.round(y + h) + .5, Math.round(x) + .5, Math.round(y) + .5],
            rowHeight = h / hv,
            columnWidth = w / wv;
        for (var i = 1; i < hv; i++) {
            path = path.concat(["M", Math.round(x) + .5, Math.round(y + i * rowHeight) + .5, "H", Math.round(x + w) + .5]);
        }
        for (i = 1; i < wv; i++) {
            path = path.concat(["M", Math.round(x + i * columnWidth) + .5, Math.round(y) + .5, "V", Math.round(y + h) + .5]);
        }
        return this.path(path.join(",")).attr({stroke: color});
    };
    var getAnchors = function(p1x, p1y, p2x, p2y, p3x, p3y) {
        var l1 = (p2x - p1x) / 2,
            l2 = (p3x - p2x) / 2,
            a = Math.atan((p2x - p1x) / Math.abs(p2y - p1y)),
            b = Math.atan((p3x - p2x) / Math.abs(p2y - p3y));
        a = p1y < p2y ? Math.PI - a : a;
        b = p3y < p2y ? Math.PI - b : b;
        var alpha = Math.PI / 2 - ((a + b) % (Math.PI * 2)) / 2,
            dx1 = l1 * Math.sin(alpha + a),
            dy1 = l1 * Math.cos(alpha + a),
            dx2 = l2 * Math.sin(alpha + b),
            dy2 = l2 * Math.cos(alpha + b);
        return {
            x1: p2x - dx1,
            y1: p2y + dy1,
            x2: p2x + dx2,
            y2: p2y + dy2
        };
    };
    // generate graphs
    var r_arr = {},
        r_label = {};
    var generate_graphs = function(_placement, _labels, _data, label_text) {
        var already_r = typeof r_arr[_placement] !== "undefined";
        var width = 800,
            height = 400,
            leftgutter = 30,
            bottomgutter = 20,
            topgutter = 20,
            colorhue = already_r ? .9 : .6,// || Math.random(),
            color = "hsl(" + [colorhue, .5, .5] + ")",
            txt = {fill: "#fff"},
            r = r_arr[_placement] || Raphael(_placement, width, height),
            X = (width - leftgutter) / _labels.length,
            max = Math.max.apply(Math, _data),
            Y = (height - bottomgutter - topgutter) / max;
        r_arr[_placement] = r;
        r.drawGrid(leftgutter + X * .5 + .5, topgutter + .5, width - leftgutter - X, height - topgutter - bottomgutter, 10, 10, "#543123");
        var path = r.path().attr({stroke: color, "stroke-width": 4, "stroke-linejoin": "round"}),
            bgp = r.path().attr({stroke: "none", opacity: .3, fill: color}),
            lx = 0, ly = 0,
            is_label_visible = false,
            leave_timer,
            blanket = r.set();
        if (!already_r) {
            r_label[_placement] = r.set();
        }
        r_label[_placement].push(r.text(30, 12, "0").attr(txt));
        r_label[_placement].hide();
        var frame = r.popup(100, 100, r_label[_placement], "right").attr({fill: "#000", stroke: "#666", "stroke-width": 2, "fill-opacity": .7}).hide();

        var p, bgpp;

        for (var i = 0, ii = _labels.length; i < ii; i++) {
            var y = Math.round(height - bottomgutter - Y * _data[i]),
                x = Math.round(leftgutter + X * (i + .5)),
                t = r.text(x, height - 6, _labels[i]).attr(txt).toBack();
            if (!i) {
                p = ["M", x, y, "C", x, y];
                bgpp = ["M", leftgutter + X * .5, height - bottomgutter, "L", x, y, "C", x, y];
            }
            if (i && i < ii - 1) {
                var Y0 = Math.round(height - bottomgutter - Y * _data[i - 1]),
                    X0 = Math.round(leftgutter + X * (i - .5)),
                    Y2 = Math.round(height - bottomgutter - Y * _data[i + 1]),
                    X2 = Math.round(leftgutter + X * (i + 1.5));
                var a = getAnchors(X0, Y0, x, y, X2, Y2);
                p = p.concat([a.x1, a.y1, x, y, a.x2, a.y2]);
                bgpp = bgpp.concat([a.x1, a.y1, x, y, a.x2, a.y2]);
            }
            var dot = r.circle(x, y, 4).attr({fill: "#333", stroke: color, "stroke-width": 2});
            blanket.push(r.rect(leftgutter + X * i, 0, X, height - bottomgutter).attr({stroke: "none", fill: "#fff", opacity: 0}));
            var rect = blanket[blanket.length - 1];
            (function (x, y, data, lbl, dot) {
                var timer, i = 0;
                rect.hover(function () {
                    clearTimeout(leave_timer);
                    var side = "right";
                    if (x + frame.getBBox().width > width) {
                        side = "left";
                    }
                    var ppp = r.popup(x, y, r_label[_placement], side, 1),
                        anim = Raphael.animation({
                            path: ppp.path,
                            transform: ["t", ppp.dx, ppp.dy]
                        }, 200 * is_label_visible);
                    frame.show().stop().animate(anim);
                    $.each(r_label[_placement], function() {
                        lx = this.transform()[0][1] + ppp.dx;
                        ly = this.transform()[0][2] + ppp.dy;
                        this.attr({text: label_text + lbl + ": " + data}).show().stop().animateWith(frame, anim, {transform: ["t", lx, ly]}, 200 * is_label_visible);
                    });
                    dot.attr("r", 6);
                    is_label_visible = true;
                }, function () {
                    dot.attr("r", 4);
                    leave_timer = setTimeout(function () {
                        frame.hide();
                        $.each(r_label[_placement], function() {
                            this.hide();
                        });
                        is_label_visible = false;
                    }, 1);
                });
            })(x, y, _data[i], _labels[i], dot);
        }
        p = p.concat([x, y, x, y]);
        bgpp = bgpp.concat([x, y, x, y, "L", x, height - bottomgutter, "z"]);
        path.attr({path: p});
        bgp.attr({path: bgpp});
        frame.toFront();
        $.each(r_label[_placement], function() {
            this.toFront();
        });
        blanket.toFront();
    };

    generate_graphs("p-year", year_labels, year_data, "Year ");
    generate_graphs("p-decade", decade_labels, decade_data, "Decade ");
    generate_graphs("p-genre", genre_labels, genre_movies_data, "Movies ");
    generate_graphs("p-genre", genre_labels, genre_series_data, " Series");
    generate_graphs("p-directed", directed_labels, directed_data, "Number of movies ");
})(jQuery);
{% endspaceless %}
//--!>
</script>
{% endif %}
{% endblock %}
